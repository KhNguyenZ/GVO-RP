const { Client, GatewayIntentBits, Collection, TextChannel,MessageEmbed,EmbedBuilder } = require('discord.js');
const mysql = require('mysql2/promise');
// const { dbConfig } = require('../config.json');
const { dbConfig, token, guildId, clientId, authMemberRoleId, commandChannelId } = require('../config.json');
// const { token, guildId } = require('../config.json');
// Kh·ªüi t·∫°o client Discord
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages,
        GatewayIntentBits.GuildMembers
    ]
});

client.login(token);

function isChannel(tempChannel, channel) {
    return tempChannel === channel;
}

async function hadRole(user, role) {
    try {
        // ƒê·∫£m b·∫£o client ƒë√£ s·∫µn s√†ng
        if (!client.isReady()) {
            throw new Error('Client is not ready');
        }

        const guild = await client.guilds.fetch(guildId);
        if (!guild) {
            throw new Error('Guild not found');
        }

        const member = await guild.members.fetch(user);
        if (!member) {
            throw new Error('Member not found');
        }

        return member.roles.cache.has(role);
    } catch (error) {
        console.error('Error in hadRole:', error);
        return false;
    }
}

async function sendMessage(channelId, msg) {
    try {
        const channel = await client.channels.fetch(channelId);
        if (channel instanceof TextChannel) {
            await channel.send(`***>>> ${msg}***`);
        } else {
            console.error('Channel is not a TextChannel');
        }
    } catch (error) {
        console.error('Error sending message:', error);
    }
}

async function sendSuccessMessage(interaction, msg) {
    try {
        await interaction.reply(`***>>> ‚úÖ ${msg}***`);
    } catch (error) {
        console.error('Error sending success message:', error);
    }
}

async function sendErrorMessage(interaction, message) {
    try {
        await interaction.reply({ content: message, ephemeral: true });  // Ephemeral s·∫Ω l√†m tin nh·∫Øn ch·ªâ ng∆∞·ªùi d√πng l·ªánh th·∫•y
    } catch (error) {
        console.error('Error sending error message:', error);
    }
}
async function sendWarningMessage(interaction, msg) {
    try {
        await interaction.reply(`***>>> ‚ö†Ô∏è ${msg}***`);
    } catch (error) {
        console.error('Error sending warning message:', error);
    }
}
async function sendInfoMessage(interaction, msg) {
    try {
        await interaction.reply(`***>>> üõà ${msg}***`);
    } catch (error) {
        console.error('Error sending info message:', error);
    }
}
async function sendUsageCommand(interaction, cmd) {
    try {
        await interaction.reply(`***> Usage: ${cmd}***`);
    } catch (error) {
        console.error('Error sending usage command:', error);
    }
}

const pool = mysql.createPool(dbConfig);
async function authAccount(userId, username) {
    try {
        // L·∫•y k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
        const connection = await pool.getConnection();
        
        // Th·ª±c hi·ªán truy v·∫•n ƒë·ªÉ ki·ªÉm tra th√¥ng tin t√†i kho·∫£n
        const [rows] = await connection.execute("SELECT * FROM `accounts` WHERE `Username` = ?", [username]);
        
        if (rows.length > 0) {
            const account = rows[0];
            const { DiscordID: authDcid, Discord_Auth: authStatus } = account;

            if (authStatus === 0) {
                const authCode = Math.floor(Math.random() * 1000000);
                
                // G·ª≠i m√£ x√°c th·ª±c qua DM
                const user = await client.users.fetch(userId);
                const embed = new EmbedBuilder()
                    .setTitle('X√°c th·ª±c t√†i kho·∫£n')
                    .setDescription(`Discord ID: ${userId}\nM√£ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n l√† [${authCode}]`)
                    .setColor('#2ac7ff')
                    .setThumbnail('https://img.upanh.tv/2024/04/29/Authb35441edd8095edc.png');

                await user.send({ embeds: [embed] });
                await user.send("# H∆Ø·ªöNG D·∫™N X√ÅC TH·ª∞C T√ÄI KHO·∫¢N\nB∆∞·ªõc 1: V√†o game, ƒëƒÉng nh·∫≠p b·∫±ng User b·∫°n v·ª´a m·ªõi x√°c th·ª±c, sau ƒë√≥ ch·ªçn 1 trong 3 nh√¢n v·∫≠t b·∫•t k·ª≥ ƒë·ªÉ ti·∫øn h√†nh x√°c th·ª±c.\nB∆∞·ªõc 2: Sau khi ƒë√£ ho√†n t·∫•t b∆∞·ªõc ch·ªçn nh√¢n v·∫≠t, h√£y s·ª≠ d·ª•ng l·ªánh /verify [Auth_Code]\nAuth_Code: l√† m√£ b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ·ªü ph√≠a tr√™n nh√©!\nCh√∫c b·∫°n ch∆°i game vui v·∫ª t·∫°i `GVO` ~~~~");
                await user.send("N·∫øu nh√¢n v·∫≠t n√†y kh√¥ng ph·∫£i c·ªßa b·∫°n nh∆∞ng v·∫´n c·ªë g·∫Øng x√°c th·ª±c, b·∫°n s·∫Ω b·ªã c·∫•m vƒ©nh vi·ªÖn t·∫°i `GVO`");

                // C·∫≠p nh·∫≠t m√£ x√°c th·ª±c trong c∆° s·ªü d·ªØ li·ªáu
                const updateQuery = "UPDATE `accounts` SET `DiscordID` = ?, `Discord_Code` = ?, `Discord_Auth` = 0 WHERE `Username` = ?";
                await connection.query(updateQuery, [userId, authCode, username]);

                // Th√™m vai tr√≤ cho ng∆∞·ªùi d√πng
                try {
                    const guild = await client.guilds.fetch(guildId);
                    const member = await guild.members.fetch(userId);

                    // Ki·ªÉm tra vai tr√≤ v√† quy·ªÅn
                    if (!member.roles.cache.has(authMemberRoleId)) {
                        await member.roles.add(authMemberRoleId);
                    }
                } catch (error) {
                    console.error('Error adding role:', error);
                    await sendErrorMessage(commandChannelId, 'Kh√¥ng th·ªÉ th√™m vai tr√≤ cho b·∫°n. H√£y ki·ªÉm tra quy·ªÅn c·ªßa bot v√† vai tr√≤.');
                }

                await connection.release();
            } else {
                if (authDcid === userId) {
                    const embed = new MessageEmbed()
                        .setTitle('Success: Auth User')
                        .setDescription(`T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c v·ªõi User [${username}]`)
                        .setColor('#78FF32');
                    
                    await sendMessage(commandChannelId, { embeds: [embed] });
                } else {
                    const dOwner = (await client.users.fetch(authDcid)).username;
                    const embed = new MessageEmbed()
                        .setTitle('Error: Invalid User')
                        .setDescription(`User [${username}] ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t v·ªõi t√†i kho·∫£n discord [${dOwner}]`)
                        .setColor('#FF0000');
                    
                    await sendMessage(commandChannelId, { embeds: [embed] });
                }
            }
        } else {
            await sendErrorMessage(commandChannelId, "T√†i kho·∫£n n√†y kh√¥ng t·ªìn t·∫°i!!!");
        }
    } catch (error) {
        console.error('Error in authAccount:', error);
    }
}
module.exports = {
    isChannel,
    hadRole,
    sendMessage,
    sendSuccessMessage,
    sendErrorMessage,
    sendWarningMessage,
    sendInfoMessage,
    sendUsageCommand,
    authAccount,
};
